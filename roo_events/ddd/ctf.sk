# -------------------- state variables (don't modify) -------------------- #
variables:
    {game::state} = false
    {deathmatch} = false
    {auto::team} = false
    {round} = 0
    {game::time} = 0
    {timer::sec} = 0
    {timer::min} = 0
    {red::points} = 0
    {blue::points} = 0
    {red::flag::taker} = ""
    {blue::flag::taker} = ""
    {world} = ""
    {red::x} = 0
    {red::y} = 0
    {red::z} = 0
    {blue::x} = 0
    {blue::y} = 0
    {blue::z} = 0

# -------------------- spawns -------------------- #
function lobby_spawn() :: object:
    return location(0.5, 0, 0.5, world "rooevents", 90, 0)

function ctf1_red_spawn() :: object: # near flag
    return location(0, 0, 0, world "ctf1", 0, 0) 

function ctf1_blue_spawn() :: object:
    return location(0, 0, 0, world "ctf1", 180, 0)

function ctf2_red_spawn() :: object:
    return location(0, 0, 0, world "ctf2", 0, 0)

function ctf2_blue_spawn() :: object:
    return location(0, 0, 0, world "ctf2", 180, 0)

function ctf3_red_spawn() :: object:
    return location(0, 0, 0, world "ctf3", 0, 0)

function ctf3_blue_spawn() :: object:
    return location(0, 0, 0, world "ctf3", 180, 0)

function ctf4_red_spawn() :: object:
    return location(0, 0, 0, world "ctf4", 0, 0)

function ctf4_blue_spawn() :: object:
    return location(0, 0, 0, world "ctf4", 180, 0)

function ctf5_red_spawn() :: object:
    return location(0, 0, 0, world "ctf5", 0, 0)

function ctf5_blue_spawn() :: object:
    return location(0, 0, 0, world "ctf5", 180, 0)

# -------------------- spawn locations dynamics -------------------- #
function red_spawn() :: object:
    if "%{world}%" is "ctf1":
        if not {game::state}:
            return ctf1_red_spawn()
        return location(ctf1_red_team(1), ctf1_red_team(2), ctf1_red_team(3), ctf1_red_team(4), ctf1_red_team(5), ctf1_red_team(6))
    else if "%{world}%" is "ctf2":
        if not {game::state}:
            return ctf2_red_spawn()
        return location(ctf2_red_team(1), ctf2_red_team(2), ctf2_red_team(3), ctf2_red_team(4), ctf2_red_team(5), ctf2_red_team(6))
    else if "%{world}%" is "ctf3":
        if not {game::state}:
            return ctf3_red_spawn()
        return location(ctf3_red_team(1), ctf3_red_team(2), ctf3_red_team(3), ctf3_red_team(4), ctf3_red_team(5), ctf3_red_team(6))
    else if "%{world}%" is "ctf4":
        if not {game::state}:
            return ctf4_red_spawn()
        return location(ctf4_red_team(1), ctf4_red_team(2), ctf4_red_team(3), ctf4_red_team(4), ctf4_red_team(5), ctf4_red_team(6))
    else if "%{world}%" is "ctf5":
        if not {game::state}:
            return ctf5_red_spawn()
        return location(ctf5_red_team(1), ctf5_red_team(2), ctf5_red_team(3), ctf5_red_team(4), ctf5_red_team(5), ctf5_red_team(6))

function blue_spawn() :: object:
    if "%{world}%" is "ctf1":
        if not {game::state}:
            return ctf1_blue_spawn()
        return location(ctf1_blue_team(1), ctf1_blue_team(2), ctf1_blue_team(3), ctf1_blue_team(4), ctf1_blue_team(5), ctf1_blue_team(6))
    else if "%{world}%" is "ctf2":
        if not {game::state}:
            return ctf2_blue_spawn()
        return location(ctf2_blue_team(1), ctf2_blue_team(2), ctf2_blue_team(3), ctf2_blue_team(4), ctf2_blue_team(5), ctf2_blue_team(6))
    else if "%{world}%" is "ctf3":
        if not {game::state}:
            return ctf3_blue_spawn()
        return location(ctf3_blue_team(1), ctf3_blue_team(2), ctf3_blue_team(3), ctf3_blue_team(4), ctf3_blue_team(5), ctf3_blue_team(6))
    else if "%{world}%" is "ctf4":
        if not {game::state}:
            return ctf5_blue_spawn()
        return location(ctf4_blue_team(1), ctf4_blue_team(2), ctf4_blue_team(3), ctf4_blue_team(4), ctf4_blue_team(5), ctf4_blue_team(6))
    else if "%{world}%" is "ctf5":
        if not {game::state}:
            return ctf5_blue_spawn()
        return location(ctf5_blue_team(1), ctf5_blue_team(2), ctf5_blue_team(3), ctf5_blue_team(4), ctf5_blue_team(5), ctf5_blue_team(6))

# -------------------- team constants -------------------- #
# -------------------- ctf1 -------------------- #
function ctf1_red_team(i: number) :: object: # red
    set {_x} to 0
    set {_y} to 0
    set {_z} to 0
    set {_world} to "ctf1"
    set {_pitch} to 0
    set {_yaw} to 0
    set {_team} to ""
    set {_lp} to ""
    set {_list::*} to {_x}, {_y}, {_z}, {_world}, {_pitch}, {_yaw}, {_team} and {_lp}
    return {_list::%{_i}%}

function ctf1_blue_team(i: number) :: object: # blue
    set {_x} to 0
    set {_y} to 0
    set {_z} to 0
    set {_world} to "ctf1"
    set {_pitch} to 180
    set {_yaw} to 0
    set {_team} to ""
    set {_lp} to ""
    set {_list::*} to {_x}, {_y}, {_z}, {_world}, {_pitch}, {_yaw}, {_team} and {_lp}
    return {_list::%{_i}%}

# -------------------- ctf2 -------------------- #
function ctf2_red_team(i: number) :: object: # red
    set {_x} to 0
    set {_y} to 0
    set {_z} to 0
    set {_world} to "ctf2"
    set {_pitch} to 0
    set {_yaw} to 0
    set {_team} to ""
    set {_lp} to ""
    set {_list::*} to {_x}, {_y}, {_z}, {_world}, {_pitch}, {_yaw}, {_team} and {_lp}
    return {_list::%{_i}%}

function ctf2_blue_team(i: number) :: object: # blue
    set {_x} to 0
    set {_y} to 0
    set {_z} to 0
    set {_world} to "ctf2"
    set {_pitch} to 180
    set {_yaw} to 0
    set {_team} to ""
    set {_lp} to ""
    set {_list::*} to {_x}, {_y}, {_z}, {_world}, {_pitch}, {_yaw}, {_team} and {_lp}
    return {_list::%{_i}%}

# -------------------- ctf3 -------------------- #
function ctf3_red_team(i: number) :: object: # red
    set {_x} to 0
    set {_y} to 0
    set {_z} to 0
    set {_world} to "ctf3"
    set {_pitch} to 0
    set {_yaw} to 0
    set {_team} to ""
    set {_lp} to ""
    set {_list::*} to {_x}, {_y}, {_z}, {_world}, {_pitch}, {_yaw}, {_team} and {_lp}
    return {_list::%{_i}%}

function ctf3_blue_team(i: number) :: object: # blue
    set {_x} to -65
    set {_y} to 51
    set {_z} to 852
    set {_world} to "ctf3"
    set {_pitch} to 180
    set {_yaw} to 0
    set {_team} to ""
    set {_lp} to ""
    set {_list::*} to {_x}, {_y}, {_z}, {_world}, {_pitch}, {_yaw}, {_team} and {_lp}
    return {_list::%{_i}%}

# -------------------- ctf4 -------------------- #
function ctf4_red_team(i: number) :: object: # red
    set {_x} to 0
    set {_y} to 0
    set {_z} to 0
    set {_world} to "ctf4"
    set {_pitch} to 0
    set {_yaw} to 0
    set {_team} to ""
    set {_lp} to ""
    set {_list::*} to {_x}, {_y}, {_z}, {_world}, {_pitch}, {_yaw}, {_team} and {_lp}
    return {_list::%{_i}%}

function ctf4_blue_team(i: number) :: object: # blue
    set {_x} to 0
    set {_y} to 0
    set {_z} to 0
    set {_world} to "ctf4"
    set {_pitch} to 180
    set {_yaw} to 0
    set {_team} to ""
    set {_lp} to ""
    set {_list::*} to {_x}, {_y}, {_z}, {_world}, {_pitch}, {_yaw}, {_team} and {_lp}
    return {_list::%{_i}%}

# -------------------- ctf5 -------------------- #
function ctf5_red_team(i: number) :: object: # red
    set {_x} to 0
    set {_y} to 0
    set {_z} to 0
    set {_world} to "ctf5"
    set {_pitch} to 0
    set {_yaw} to 0
    set {_team} to ""
    set {_lp} to ""
    set {_list::*} to {_x}, {_y}, {_z}, {_world}, {_pitch}, {_yaw}, {_team} and {_lp}
    return {_list::%{_i}%}

function ctf5_blue_team(i: number) :: object: # blue
    set {_x} to 0
    set {_y} to 0
    set {_z} to 0
    set {_world} to "ctf5"
    set {_pitch} to 180
    set {_yaw} to 0
    set {_team} to ""
    set {_lp} to ""
    set {_list::*} to {_x}, {_y}, {_z}, {_world}, {_pitch}, {_yaw}, {_team} and {_lp}
    return {_list::%{_i}%}

# -------------------- team dynamics -------------------- #
function red_team(i: number) :: object:
    if {world} is "ctf1":
        set {_x} to ctf1_red_team(1)
        set {_y} to ctf1_red_team(2)
        set {_z} to ctf1_red_team(3)
        set {_world} to ctf1_red_team(4)
        set {_pitch} to ctf1_red_team(5)
        set {_yaw} to ctf1_red_team(6)
        set {_team} to ctf1_red_team(7)
        set {_lp} to ctf1_red_team(8)
    else if {world} is "ctf2":
        set {_x} to ctf2_red_team(1)
        set {_y} to ctf2_red_team(2)
        set {_z} to ctf2_red_team(3)
        set {_world} to ctf2_red_team(4)
        set {_pitch} to ctf2_red_team(5)
        set {_yaw} to ctf2_red_team(6)
        set {_team} to ctf2_red_team(7)
        set {_lp} to ctf2_red_team(8)
    else if {world} is "ctf3":
        set {_x} to ctf3_red_team(1)
        set {_y} to ctf3_red_team(2)
        set {_z} to ctf3_red_team(3)
        set {_world} to ctf3_red_team(4)
        set {_pitch} to ctf3_red_team(5)
        set {_yaw} to ctf3_red_team(6)
        set {_team} to ctf3_red_team(7)
        set {_lp} to ctf3_red_team(8)
    else if {world} is "ctf4":
        set {_x} to ctf4_red_team(1)
        set {_y} to ctf4_red_team(2)
        set {_z} to ctf4_red_team(3)
        set {_world} to ctf4_red_team(4)
        set {_pitch} to ctf4_red_team(5)
        set {_yaw} to ctf4_red_team(6)
        set {_team} to ctf4_red_team(7)
        set {_lp} to ctf4_red_team(8)
    else if {world} is "ctf5":
        set {_x} to ctf5_red_team(1)
        set {_y} to ctf5_red_team(2)
        set {_z} to ctf5_red_team(3)
        set {_world} to ctf5_red_team(4)
        set {_pitch} to ctf5_red_team(5)
        set {_yaw} to ctf5_red_team(6)
        set {_team} to ctf5_red_team(7)
        set {_lp} to ctf5_red_team(8)
    set {_list::*} to {_x}, {_y}, {_z}, {_world}, {_pitch}, {_yaw}, {_team} and {_lp}
    return {_list::%{_i}%}

function blue_team(i: number) :: object:
    if {world} is "ctf1":
        set {_x} to ctf1_blue_team(1)
        set {_y} to ctf1_blue_team(2)
        set {_z} to ctf1_blue_team(3)
        set {_world} to ctf1_blue_team(4)
        set {_pitch} to ctf1_blue_team(5)
        set {_yaw} to ctf1_blue_team(6)
        set {_team} to ctf1_blue_team(7)
        set {_lp} to ctf1_blue_team(8)
    else if {world} is "ctf2":
        set {_x} to ctf2_blue_team(1)
        set {_y} to ctf2_blue_team(2)
        set {_z} to ctf2_blue_team(3)
        set {_world} to ctf2_blue_team(4)
        set {_pitch} to ctf2_blue_team(5)
        set {_yaw} to ctf2_blue_team(6)
        set {_team} to ctf2_blue_team(7)
        set {_lp} to ctf2_blue_team(8)
    else if {world} is "ctf3":
        set {_x} to ctf3_blue_team(1)
        set {_y} to ctf3_blue_team(2)
        set {_z} to ctf3_blue_team(3)
        set {_world} to ctf3_blue_team(4)
        set {_pitch} to ctf3_blue_team(5)
        set {_yaw} to ctf3_blue_team(6)
        set {_team} to ctf3_blue_team(7)
        set {_lp} to ctf3_blue_team(8)
    else if {world} is "ctf4":
        set {_x} to ctf4_blue_team(1)
        set {_y} to ctf4_blue_team(2)
        set {_z} to ctf4_blue_team(3)
        set {_world} to ctf4_blue_team(4)
        set {_pitch} to ctf4_blue_team(5)
        set {_yaw} to ctf4_blue_team(6)
        set {_team} to ctf4_blue_team(7)
        set {_lp} to ctf4_blue_team(8)
    else if {world} is "ctf5":
        set {_x} to ctf5_blue_team(1)
        set {_y} to ctf5_blue_team(2)
        set {_z} to ctf5_blue_team(3)
        set {_world} to ctf5_blue_team(4)
        set {_pitch} to ctf5_blue_team(5)
        set {_yaw} to ctf5_blue_team(6)
        set {_team} to ctf5_blue_team(7)
        set {_lp} to ctf5_blue_team(8)
    set {_list::*} to {_x}, {_y}, {_z}, {_world}, {_pitch}, {_yaw}, {_team} and {_lp}
    return {_list::%{_i}%}

# -------------------- ctf1 -------------------- #
function ctf1_red_flag(i: number) :: object:
    set {_x} to 0                   # x pos
    set {_y} to 0                   # y pos
    set {_z} to 0                   # z pos
    set {_name} to ""  # banner name
    set {_rotation} to 0            # banner rotation
    set {_list::*} to {_x}, {_y}, {_z}, {_name} and {_rotation}
    return {_list::%{_i}%}

function ctf1_blue_flag(i: number) :: object:
    set {_x} to 0
    set {_y} to 0
    set {_z} to 0
    set {_name} to ""
    set {_rotation} to 8
    set {_list::*} to {_x}, {_y}, {_z}, {_name} and {_rotation}
    return {_list::%{_i}%}

# -------------------- ctf2 -------------------- #
function ctf2_red_flag(i: number) :: object:
    set {_x} to 0
    set {_y} to 0
    set {_z} to 0
    set {_name} to ""
    set {_rotation} to 0
    set {_list::*} to {_x}, {_y}, {_z}, {_name} and {_rotation}
    return {_list::%{_i}%}

function ctf2_blue_flag(i: number) :: object:
    set {_x} to 0
    set {_y} to 0
    set {_z} to 0
    set {_name} to ""
    set {_rotation} to 8
    set {_list::*} to {_x}, {_y}, {_z}, {_name} and {_rotation}
    return {_list::%{_i}%}

# -------------------- ctf3 -------------------- #
function ctf3_red_flag(i: number) :: object:
    set {_x} to 0
    set {_y} to 0
    set {_z} to 0
    set {_name} to ""
    set {_rotation} to 0
    set {_list::*} to {_x}, {_y}, {_z}, {_name} and {_rotation}
    return {_list::%{_i}%}

function ctf3_blue_flag(i: number) :: object:
    set {_x} to 0
    set {_y} to 0
    set {_z} to 0
    set {_name} to ""
    set {_rotation} to 8
    set {_list::*} to {_x}, {_y}, {_z}, {_name} and {_rotation}
    return {_list::%{_i}%}

# -------------------- ctf4 -------------------- #
function ctf4_red_flag(i: number) :: object:
    set {_x} to 0
    set {_y} to 0
    set {_z} to 0
    set {_name} to ""
    set {_rotation} to 0
    set {_list::*} to {_x}, {_y}, {_z}, {_name} and {_rotation}
    return {_list::%{_i}%}

function ctf4_blue_flag(i: number) :: object:
    set {_x} to 0
    set {_y} to 0
    set {_z} to 0
    set {_name} to ""
    set {_rotation} to 8
    set {_list::*} to {_x}, {_y}, {_z}, {_name} and {_rotation}
    return {_list::%{_i}%}

# -------------------- ctf5 -------------------- #
function ctf5_red_flag(i: number) :: object:
    set {_x} to 0
    set {_y} to 0
    set {_z} to 0
    set {_name} to ""
    set {_rotation} to 0
    set {_list::*} to {_x}, {_y}, {_z}, {_name} and {_rotation}
    return {_list::%{_i}%}

function ctf5_blue_flag(i: number) :: object:
    set {_x} to 0
    set {_y} to 0
    set {_z} to 0
    set {_name} to ""
    set {_rotation} to 8
    set {_list::*} to {_x}, {_y}, {_z}, {_name} and {_rotation}
    return {_list::%{_i}%}

# -------------------- flag dynamics -------------------- #
function red_flag(i: number) :: object:
    if "%{world}%" is "ctf1":
        set {_x} to ctf1_red_flag(1)
        set {_y} to ctf1_red_flag(2)
        set {_z} to ctf1_red_flag(3)
        set {_name} to ctf1_red_flag(4)
        set {_rotation} to ctf1_red_flag(5)
    else if "%{world}%" is "ctf2":
        set {_x} to ctf2_red_flag(1)
        set {_y} to ctf2_red_flag(2)
        set {_z} to ctf2_red_flag(3)
        set {_name} to ctf2_red_flag(4)
        set {_rotation} to ctf2_red_flag(5)
    else if "%{world}%" is "ctf3":
        set {_x} to ctf3_red_flag(1)
        set {_y} to ctf3_red_flag(2)
        set {_z} to ctf3_red_flag(3)
        set {_name} to ctf3_red_flag(4)
        set {_rotation} to ctf3_red_flag(5)
    else if "%{world}%" is "ctf4":
        set {_x} to ctf4_red_flag(1)
        set {_y} to ctf4_red_flag(2)
        set {_z} to ctf4_red_flag(3)
        set {_name} to ctf4_red_flag(4)
        set {_rotation} to ctf4_red_flag(5)
    else if "%{world}%" is "ctf5":
        set {_x} to ctf5_red_flag(1)
        set {_y} to ctf5_red_flag(2)
        set {_z} to ctf5_red_flag(3)
        set {_name} to ctf5_red_flag(4)
        set {_rotation} to ctf5_red_flag(5)
    set {_list::*} to {_x}, {_y}, {_z}, {_name} and {_rotation}
    return {_list::%{_i}%}

function blue_flag(i: number) :: object:
    if "%{world}%" is "ctf1":
        set {_x} to ctf1_blue_flag(1)
        set {_y} to ctf1_blue_flag(2)
        set {_z} to ctf1_blue_flag(3)
        set {_name} to ctf1_blue_flag(4)
        set {_rotation} to ctf1_blue_flag(5)
    else if "%{world}%" is "ctf2":
        set {_x} to ctf2_blue_flag(1)
        set {_y} to ctf2_blue_flag(2)
        set {_z} to ctf2_blue_flag(3)
        set {_name} to ctf2_blue_flag(4)
        set {_rotation} to ctf2_blue_flag(5)
    else if "%{world}%" is "ctf3":
        set {_x} to ctf3_blue_flag(1)
        set {_y} to ctf3_blue_flag(2)
        set {_z} to ctf3_blue_flag(3)
        set {_name} to ctf3_blue_flag(4)
        set {_rotation} to ctf3_blue_flag(5)
    else if "%{world}%" is "ctf4":
        set {_x} to ctf4_blue_flag(1)
        set {_y} to ctf4_blue_flag(2)
        set {_z} to ctf4_blue_flag(3)
        set {_name} to ctf4_blue_flag(4)
        set {_rotation} to ctf4_blue_flag(5)
    else if "%{world}%" is "ctf5":
        set {_x} to ctf5_blue_flag(1)
        set {_y} to ctf5_blue_flag(2)
        set {_z} to ctf5_blue_flag(3)
        set {_name} to ctf5_blue_flag(4)
        set {_rotation} to ctf5_blue_flag(5)
    set {_list::*} to {_x}, {_y}, {_z}, {_name} and {_rotation}
    return {_list::%{_i}%}

# -------------------- command function -------------------- #
function apply_effect(p: player):
    execute console command "/effect give %{_p}% minecraft:glowing infinite 1 true"

function clear_effect(p: player):
    execute console command "/effect clear %{_p}% minecraft:glowing"

function set_block_flag(w: text, x: number, y: number, z: number, f: text, r: number):
    execute console command "/execute in minecraft:%{_w}% run forceload add %{_x}% %{_z}% %{_x}% %{_z}%"
    execute console command "/execute in minecraft:%{_w}% run setblock %{_x}% %{_y}% %{_z}% minecraft:%{_f}%[rotation=%{_r}%] replace"
    execute console command "/execute in minecraft:%{_w}% run forceload remove %{_x}% %{_z}% %{_x}% %{_z}%"

function set_block(w: text, x: number, y: number, z: number, b: text):
    execute console command "/execute in minecraft:%{_w}% run forceload add %{_x}% %{_z}% %{_x}% %{_z}%"
    execute console command "/execute in minecraft:%{_w}% run setblock %{_x}% %{_y}% %{_z}% minecraft:%{_b}% replace"
    execute console command "/execute in minecraft:%{_w}% run forceload remove %{_x}% %{_z}% %{_x}% %{_z}%"

function set_gamemode(p: player, m: text):
    execute console command "/minecraft:gamemode %{_m}% %{_p}%"

function set_hat(p: player, f: text):
    execute console command "/minecraft:item replace entity %{_p}% armor.head with minecraft:%{_f}%"

function set_lp(p: player, n: text):
    execute console command "/luckperms user %{_p}% parent set %{_n}%"

function give_item(p: player, i: text, a: number):
    execute console command "/minecraft:give %{_p}% %{_i}% %{_a}%"

# -------------------- helper function -------------------- #
function set_red_flag(x: number, y: number, z: number):
    set {red::x} to {_x}
    set {red::y} to {_y}
    set {red::z} to {_z}

function set_blue_flag(x: number, y: number, z: number):
    set {blue::x} to {_x}
    set {blue::y} to {_y}
    set {blue::z} to {_z}

function remove_player_from_team(p: player):
    remove {_p} from {red::team::*}
    remove {_p} from {blue::team::*}

function is_on_team(p: player) :: boolean:
    if {red::team::*} contains {_p}:
        return true
    else if {blue::team::*} contains {_p}:
        return true
    return false

function drop_flag(p: player):
    if {_p} is {red::flag::taker}:
        send title "" with subtitle "%{red::flag::taker}%&r&c Dropped The &r%red_team(7)% Flag" to all players for 4 seconds
        set {red::flag::taker} to ""
        clear_effect({_p})
        set_hat({_p}, "air")
        if block at {_p}'s location is block at location({blue::x}, {blue::y}, {blue::z}, world "%{world}%"):
            set_block(red_team(4), round({_p}'s x-coordinate), round({_p}'s y-coordinate) + 2, round({_p}'s z-coordinate), "bedrock")
            set_block_flag(red_team(4), round({_p}'s x-coordinate), round({_p}'s y-coordinate) + 3, round({_p}'s z-coordinate), red_flag(4), red_flag(5))
            set_red_flag(round({_p}'s x-coordinate), round({_p}'s y-coordinate) + 3, round({_p}'s z-coordinate))
        else:
            set_block(red_team(4), round({_p}'s x-coordinate), round({_p}'s y-coordinate) - 1, round({_p}'s z-coordinate), "bedrock")
            set_block_flag(red_team(4), round({_p}'s x-coordinate), round({_p}'s y-coordinate), round({_p}'s z-coordinate), red_flag(4), red_flag(5))
            set_red_flag(round({_p}'s x-coordinate), round({_p}'s y-coordinate), round({_p}'s z-coordinate))
    else if {_p} is {blue::flag::taker}:
        send title "" with subtitle "%{blue::flag::taker}%&r&c Dropped The &r%blue_team(7)% Flag" to all players for 4 seconds
        set {blue::flag::taker} to ""
        clear_effect({_p})
        set_hat({_p}, "air")
        if block at {_p}'s location is block at location({red::x}, {red::y}, {red::z}, world "%{world}%"):
            set_block(blue_team(4), round({_p}'s x-coordinate), round({_p}'s y-coordinate) + 2, round({_p}'s z-coordinate), "bedrock")
            set_block_flag(blue_team(4), round({_p}'s x-coordinate), round({_p}'s y-coordinate) + 3, round({_p}'s z-coordinate), blue_flag(4), blue_flag(5))
            set_blue_flag(round({_p}'s x-coordinate), round({_p}'s y-coordinate) + 3, round({_p}'s z-coordinate))
        else:
            set_block(blue_team(4), round({_p}'s x-coordinate), round({_p}'s y-coordinate) - 1, round({_p}'s z-coordinate), "bedrock")
            set_block_flag(blue_team(4), round({_p}'s x-coordinate), round({_p}'s y-coordinate), round({_p}'s z-coordinate), blue_flag(4), blue_flag(5))
            set_blue_flag(round({_p}'s x-coordinate), round({_p}'s y-coordinate), round({_p}'s z-coordinate))

# -------------------- scoreboard functions -------------------- #
function game_time() :: string:
    if {deathmatch}:
        return "Next Point Wins!"
    else if not {game::state}:
        return "&6&m                               "
    set {timer::min} to floor({game::time} / 60)
    set {timer::sec} to mod({game::time}, 60)
    if {timer::min} < 10:
        if {timer::sec} < 10:
            return "Round Ends In: 0%{timer::min}%:0%{timer::sec}%"
        return "Round Ends In: 0%{timer::min}%:%{timer::sec}%"
    else if {timer::sec} < 10:
        return "Round Ends In: %{timer::min}%:0%{timer::sec}%"
    return "Round Ends In: %{timer::min}%:%{timer::sec}%"

function red_flag_status() :: text:
    if {red::flag::taker} is not "":
        return "&cCaptured"
    else if {red::x} is red_flag(1):
        return "&aHome"
    return "&eDropped"

function blue_flag_status() :: text:
    if {blue::flag::taker} is not "":
        return "&cCaptured"
    else if {blue::x} is blue_flag(1):
        return "&aHome"
    return "&eDropped"

function on_red(p: player) :: text:
    if {red::team::*} contains {_p}:
        return "<gray><- You"
    return ""

function on_blue(p: player) :: text:
    if {blue::team::*} contains {_p}:
        return "<gray><- You"
    return ""

function get_round() :: text:
    if {round} is 0:
        return "&a&l1&7 - 2 - 3 - 5 - 5"
    else if {round} is 1:
        return "&71 - &r&a&l2&r&7 - 3 - 4 - 5"
    else if {round} is 2:
        return "&71 - 2 - &r&a&l3&r&7 - 4 - 5"
    else if {round} is 3:
        return "&71 - 2 - 3 - &r&a&l4&r&7 - 5"
    else if {round} is 4:
        return "&71 - 2 - 3 - 4 - &r&a&l5"

# -------------------- scoreboard -------------------- #
on first join:
    if {auto::team}:
        wait 1 second
        set slot 1 of player to 32 cooked beef
        if size of {red::team::*} > size of {blue::team::*}:
            remove_player_from_team(player)
            add player to {blue::team::*}
            set_lp(player, blue_team(8))
            teleport player to blue_spawn()
        else:
            remove_player_from_team(player)
            add player to {red::team::*}
            set_lp(player, red_team(8))
            teleport player to red_spawn()

on join:
    if {auto::team}:
        if not is_on_team(player):
            set slot 1 of player to 32 cooked beef
            if size of {red::team::*} > size of {blue::team::*}:
                remove_player_from_team(player)
                add player to {blue::team::*}
                set_lp(player, blue_team(8))
                teleport player to blue_spawn()
            else:
                remove_player_from_team(player)
                add player to {red::team::*}
                set_lp(player, red_team(8))
                teleport player to red_spawn()
        else:
            if {red::team::*} contains player:
                set_lp(player, red_team(8))
            else:
                set_lp(player, blue_team(8))
    else:
        teleport player to lobby_spawn()
        remove_player_from_team(player)
        set_lp(player, "default")
    if {left::in::spectator::*} contains player:
        if {red::team::*} contains player:
            teleport player to red_spawn()
        else if {blue::team::*} contains player:
            teleport player to blue_spawn()
        remove player from {left::in::spectator::*}
    while player is online:
        if player is not in world "rooevents":
            set line 1 of player's scoreboard to "&6&m                               "
            set line 2 of player's scoreboard to game_time()
            set line 3 of player's scoreboard to "&6&m                               "
            set line 4 of player's scoreboard to "Status: %blue_flag_status()%"
            set line 5 of player's scoreboard to "Points: %{blue::points}%/3"
            set line 6 of player's scoreboard to "%blue_team(7)% %on_blue(player)%"
            set line 7 of player's scoreboard to ""
            set line 8 of player's scoreboard to "&6&m                               "
            set line 9 of player's scoreboard to "Status: %red_flag_status()%"
            set line 10 of player's scoreboard to "Points: %{red::points}%/3"
            set line 11 of player's scoreboard to "%red_team(7)% %on_red(player)%"
            set line 12 of player's scoreboard to ""
            set line 13 of player's scoreboard to "&6&m                               "
            set line 14 of player's scoreboard to "Round: %get_round()%"
            set line 15 of player's scoreboard to "&6&m                               "
            set title of player's scoreboard to "&x&f&f&2&6&2&6&lR&x&f&f&3&a&2&1&lo&x&f&f&4&e&1&6&lo &x&f&f&6&2&1&8&lE&x&f&f&7&7&1&3&lv&x&f&f&8&b&0&e&le&x&f&f&9&f&0&a&ln&x&f&f&b&3&0&5&lt&x&f&f&c&7&0&0&ls"
        wait 1 second

# -------------------- score points logic -------------------- #
on region enter:
    if {game::state}:
        if "%region%" is "red_home in world %{world}%":
            if player is {blue::flag::taker}:
                send title "" with subtitle "%red_team(7)%&r&c Has Scored a Point" to all players for 4 seconds
                set {blue::flag::taker} to ""
                set_block_flag(blue_team(4), blue_flag(1), blue_flag(2), blue_flag(3), blue_flag(4), blue_flag(5))
                set_blue_flag(blue_flag(1), blue_flag(2), blue_flag(3))
                clear_effect(player)
                set_hat(player, "air")
                add 1 to {red::points}
                if {deathmatch}:
                    set {game::state} to false
                    send title "%red_team(7)% Wins!" to all players for 5 seconds
                    execute console command "/execute at @a run playsound minecraft:entity.firework_rocket.twinkle player @p ~ ~ ~ 0.5 1"
                    wait 7 seconds
                    loop {blue::team::*}:
                        set_gamemode(loop-value, "spectator")
                    teleport all players to red_spawn()
                else if {red::points} >= 3:
                    set {game::state} to false
                    send title "%red_team(7)% Wins!" to all players for 5 seconds
                    execute console command "/execute at @a run playsound minecraft:entity.firework_rocket.twinkle player @p ~ ~ ~ 0.5 1"
                    wait 7 seconds
                    loop {blue::team::*}:
                        set_gamemode(loop-value, "spectator")
                    teleport all players to red_spawn()
        else if "%region%" is "blue_home in world %{world}%":
            if player is {red::flag::taker}:
                send title "" with subtitle "%blue_team(7)%&r&c Has Scored a Point" to all players for 4 seconds
                set {red::flag::taker} to ""
                set_block_flag(red_team(4), red_flag(1), red_flag(2), red_flag(3), red_flag(4), red_flag(5))
                set_red_flag(red_flag(1), red_flag(2), red_flag(3))
                clear_effect(player)
                set_hat(player, "air")
                add 1 to {blue::points}
                if {deathmatch}:
                    set {game::state} to false
                    send title "%blue_team(7)% Wins!" to all players for 5 seconds
                    execute console command "/execute at @a run playsound minecraft:entity.firework_rocket.twinkle player @p ~ ~ ~ 0.5 1"
                    wait 7 seconds
                    loop {red::team::*}:
                        set_gamemode(loop-value, "spectator")
                    teleport all players to blue_spawn()
                else if {blue::points} >= 3:
                    set {game::state} to false
                    send title "%blue_team(7)% Wins!" to all players for 5 seconds
                    execute console command "/execute at @a run playsound minecraft:entity.firework_rocket.twinkle player @p ~ ~ ~ 0.5 1"
                    wait 7 seconds
                    loop {red::team::*}:
                        set_gamemode(loop-value, "spectator")
                    teleport all players to blue_spawn()

# -------------------- %{world}% logic -------------------- #
on player walk:
    if {game::state}:
        if player is not in world "rooevents":
            if is_on_team(player):
                if gamemode of player is not spectator:
                    if block at player's location is block at location({red::x}, {red::y}, {red::z}, world "%{world}%"):
                        if {red::flag::taker} is "":
                            if {red::team::*} does not contain player:
                                set block at location at player's location to air
                                apply_effect(player)
                                set_hat(player, red_flag(4))
                                set {red::flag::taker} to player
                                if {red::x} is not red_flag(1):
                                    send title "" with subtitle "%{red::flag::taker}%&c Picked Up The &r%red_team(7)% Flag" to all players for 4 seconds
                                else:
                                    send title "" with subtitle "%{red::flag::taker}%&c Captured The &r%red_team(7)% Flag" to all players for 4 seconds
                    if block at player's location is block at location({blue::x}, {blue::y}, {blue::z}, world "%{world}%"):
                        if {blue::flag::taker} is "":
                            if {blue::team::*} does not contain player:
                                set block at location at player's location to air
                                apply_effect(player)
                                set_hat(player, blue_flag(4))
                                set {blue::flag::taker} to player
                                if {blue::x} is not blue_flag(1):
                                    send title "" with subtitle "%{blue::flag::taker}%&c Picked Up The &r%blue_team(7)% Flag" to all players for 4 seconds
                                else:
                                    send title "" with subtitle "%{blue::flag::taker}%&c Captured The &r%blue_team(7)% Flag" to all players for 4 seconds

# -------------------- team killing -------------------- #
on damage of player with priority highest:
    if {red::team::*} contains attacker:
        if {red::team::*} contains victim:
            cancel event
    else if {blue::team::*} contains attacker:
        if {blue::team::*} contains victim:
            cancel event

# -------------------- set respawn location -------------------- #
on respawn:
    if player is not in world "rooevents":
        if {red::team::*} contains player:
            set respawn location to red_spawn()
        else if {blue::team::*} contains player:
            set respawn location to blue_spawn()

# -------------------- on death logic -------------------- #
on death with priority highest:
    if victim is not in world "rooevents":
        if is_on_team(victim):
            cancel event
            drop_flag(victim)
            set_gamemode(victim, "spectator")
            set {_n} to 10
            set {_c} to {_n}
            loop {_n} times:
                send title "&a%{_c}%" to victim
                subtract 1 from {_c}
                wait 1 second
            send title "" to victim
            if {red::team::*} contains victim:
                teleport victim to red_spawn()
            else if {blue::team::*} contains victim:
                teleport victim to blue_spawn()
            set_gamemode(victim, "survival")

# -------------------- other stuff -------------------- #
on quit:
    drop_flag(player)
    if gamemode of player is spectator:
        add player to {left::in::spectator::*}

on break of banner:
    if player is not op:
        cancel event

# -------------------- event timer -------------------- #
every 1 second:
    subtract 1 from {game::time}
    if {game::state}:
        if {game::time} < 0:
            if {red::points} > {blue::points}:
                set {game::state} to false
                send title "%red_team(7)% Wins!" to all players for 5 seconds
                execute console command "/execute at @a run playsound minecraft:entity.firework_rocket.twinkle player @p ~ ~ ~ 0.5 1"
                wait 7 seconds
                loop {blue::team::*}:
                    set_gamemode(loop-value, "spectator")
                teleport all players to red_spawn()
            else if {blue::points} > {red::points}:
                set {game::state} to false
                send title "%blue_team(7)% Wins!" to all players for 5 seconds
                execute console command "/execute at @a run playsound minecraft:entity.firework_rocket.twinkle player @p ~ ~ ~ 0.5 1"
                wait 7 seconds
                loop {red::team::*}:
                    set_gamemode(loop-value, "spectator")
                teleport all players to blue_spawn()
            else if not {deathmatch}:
                send title "&c&lDeathmatch" with subtitle "&6Next Point Wins!" to all players for 5 seconds
                set {deathmatch} to true

# -------------------- command functions -------------------- #
function reset_round(r: number, w: text):
    set {auto::team} to true
    set {round} to {_r}
    set {world} to {_w}
    delete {red::team::*}
    delete {blue::team::*}
    set {red::points} to 0
    set {blue::points} to 0
    set {red::flag::taker} to ""
    set {blue::flag::taker} to ""
    set_red_flag(red_flag(1), red_flag(2), red_flag(3))
    set_blue_flag(blue_flag(1), blue_flag(2), blue_flag(3))
    set_block_flag(red_team(4), red_flag(1), red_flag(2), red_flag(3), red_flag(4), red_flag(5))
    set_block_flag(blue_team(4), blue_flag(1), blue_flag(2), blue_flag(3), blue_flag(4), blue_flag(5))
    loop all players:
        clear_effect(loop-player)
        set_hat(loop-player, "air")
        if size of {blue::team::*} > size of {red::team::*}:
            add loop-player to {red::team::*}
            set_lp(loop-player, red_team(8))
            teleport loop-player to red_spawn()
        else:
            add loop-player to {blue::team::*}
            set_lp(loop-player, blue_team(8))
            teleport loop-player to blue_spawn()

function start_round():
    send title "" with subtitle "&a&lGO" to all players for 4 seconds
    set {game::time} to 1500
    set {game::state} to true
    loop all players:
        set slot 1 of loop-player to 32 cooked beef

function end_round():
    set {game::state} to false
    set {deathmatch} to false
    set {auto::team} to false
    delete {red::team::*}
    delete {blue::team::*}
    loop all players:
        set_lp(loop-player, "default")
        clear_effect(loop-player)
        set_hat(loop-player, "air")
    teleport all players to lobby_spawn()

# -------------------- commands -------------------- #
command /ctfround1:
    permission: op
    trigger:
        reset_round(0, "ctf1")

command /ctfstart1:
    permission: op
    trigger:
        start_round()
        fill("ctf1", -42, 56, -685, -30, 52, -690, "air") # desert
        fill("ctf1", -51, 56, 808, -63, 52, 813, "air") # plains

command /ctfend:
    permission: op
    trigger:
        end_round()

command /ctfround2:
    permission: op
    trigger:
        reset_round(1, "ctf2")

command /ctfstart2:
    permission: op
    trigger:
        start_round()
        fill("ctf2", -72, 56, -689, -60, 52, -694, "air") # jungle
        fill("ctf2", -61, 56, 804, -73, 52, 809, "air") # cherry

command /ctfround3:
    permission: op
    trigger:
        reset_round(2, "ctf3")

command /ctfstart3:
    permission: op
    trigger:
        start_round()
        fill("ctf3", -68, 56, -669, -56, 52, -674, "air") # crimson
        fill("ctf3", -59, 56, 823, -71, 52, 828, "air") # warped

command /ctfround4:
    permission: op
    trigger:
        reset_round(3, "ctf4")

command /ctfstart4:
    permission: op
    trigger:
        start_round()
        fill("ctf4", -80, 56, -648, -68, 52, -653, "air") # spruce
        fill("ctf4", -51, 56, 771, -63, 52, 776, "air") # snow

command /ctfround5:
    permission: op
    trigger:
        reset_round(4, "ctf5")

command /ctfstart5:
    permission: op
    trigger:
        start_round()
        fill("ctf5", -105, 56, -646, -93, 52, -651, "air") # mushroom
        fill("ctf5", -42, 56, 765, -54, 52, 770, "air") # savanna

command /ctfsetteam <player> <string>:
    permission: op
    trigger:
        if arg-2 is red_team(8):
            remove_player_from_team(arg-1)
            add arg-1 to {red::team::*}
            teleport arg-1 to red_spawn()
            set_lp(arg-1, red_team(8))
        else if arg-2 is blue_team(8):
            remove_player_from_team(arg-1)
            add arg-1 to {blue::team::*}
            teleport arg-1 to blue_spawn()
            set_lp(arg-1, blue_team(8))

command /ctftpteam <string>:
    permission: op
    trigger:
        if arg-1 is red_team(8):
            loop {red::team::*}:
                teleport loop-value to player
        else if arg-1 is blue_team(8):
            loop {blue::team::*}:
                teleport loop-value to player

command /ctfsettime <number>:
    permission: op
    trigger:
        set {game::time} to arg-1
